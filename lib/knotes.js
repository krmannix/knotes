var user_args = process.argv.slice(2);

if (user_args.length > 0) {
	console.log(user_args.length);
	switch (user_args[0].trim()) {
		case 'add':
			break;
		default:
			printError();
			process.exit(0);
			break;
	}
} else {
	console.error
}

var printError = function(message) {
	if (message) console.error("Error: " + message);
	else console.error("Could not understand command");
};var user_args = process.argv.slice(2);

if (user_args.length > 0) {
	console.log(user_args.length);
	switch (user_args[0].trim()) {
		case 'add':
			break;
		default:
			printError();
			process.exit(0);
			break;
	}
} else {
	console.error
}

var printError = function(message) {
	if (message) console.error("Error: " + message);
	else console.error("Could not understand command");
};var user_args = process.argv.slice(2);

if (user_args.length > 0) {
	console.log(user_args[0]);
	switch (user_args[0].trim()) {
		case 'add':
			break;
		default:
			printError();
			process.exit(0);
			break;
	}
} else {
	console.error
}

var printError = function(message) {
	if (message) console.error("Error: " + message);
	else console.error("Could not understand command");
};var user_args = process.argv.slice(2);

if (user_args.length > 0) {
	switch (user_args[0].trim()) {
		case 'add':
			break;
		default:
			printError();
			process.exit(0);
			break;
	}
} else {
	console.error
}

var printError = function(message) {
	if (message) console.error("Error: " + message);
	else console.error("Could not understand command");
};var user_args = process.argv.slice(2);

if (user_args) {
	switch (user_args[0].trim()) {
		case 'add':
			break;
		default:
			console.error("Could not understand command");
			process.exit(0);
			break;
	}
} else {
	readFile();
};var user_args = process.argv.slice(2);

if (user_args) {
	switch (user_args[0].trim()) {
		case 'add':
			break;
		default:
			console.error("Could not understand command");
			process.exit(0);
			break;
	}
} else {
	readFile();
};